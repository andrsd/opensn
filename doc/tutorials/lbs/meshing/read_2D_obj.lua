--[[ @doc
# Reading a 2D .obj file

Reading a 2D .obj file with material IDs and Boundary IDs.

Click here for more information on [WaveFront objects, aka obj](https://en.wikipedia.org/wiki/Wavefront_.obj_file)

## Create an Unstructured Triangular Mesh
We can create an unstructured triangular mesh with the [Triangle Mesh Generator](http://www.cs.cmu.edu/~quake/triangle.html).
Triangle is also accessible via [Meshpy](https://documen.tician.de/meshpy/) in python.

Then, one needs to convert the data generated by Triangle into the Wavefront obj format.

## Reading the Mesh
We use the ```FromFileMeshGenerator``` and pass the path to the obj file.
We also partition the 2D mesh into 2x2 subdomains using `Parmetis`.
Finally, we export the mesh to a VTU file.

The resulting mesh and material layout is shown below:

![Mesh_Material](images/Triangle_1542_mesh_material.png)

When using the Parmetis partitioner, we obtain:

![Mesh_Partition](images/Triangle_1542_partition_Parmetis.png)

FYI, had we chosen the KBA partitioner, the partition would have been:

![Mesh_Partition](images/Triangle_1542_partition_KBA.png)


--]]
-- Setup the mesh
meshgen = mesh.MeshGenerator.Create
({
  inputs =
  {
    mesh.FromFileMeshGenerator.Create
    ({
        filename="./tri_2mat_bc_1542.obj"
    }),
  },
  partitioner = PETScGraphPartitioner.Create({type="parmetis"})
--   partitioner = KBAGraphPartitioner.Create
--   ({
--     nx = 2, ny=2, nz=1,
--     xcuts = {0.5}, ycuts = {0.5},
--   })
})
mesh.MeshGenerator.Execute(meshgen)

mesh.ExportToVTK("Triangle_1542_mesh_only")

--[[ @doc
## The rest of the simulation
The following line inserts the rest of the simulation data:
+ materials and sources
+ angular quadrature
+ LBS solver options and execution
+ VTK post-processing

You can view its contents in [transport_simulation_part_2D.lua](transport_simulation_part_2D.md)

--]]
-- Rest of the simulation
dofile("transport_simulation_part_2D.lua")

--[[ @doc
## Post-Processing via Field Functions
We extract the scalar flux (i.e., the first entry in the field function list; recall that lua indexing starts at 1)
and export it to a VTK file whose name is supplied by the user.
--]]
-- Get field functions
fflist,count = LBSGetScalarFieldFunctionList(phys)
vtk_basename = "read_obj"
ExportFieldFunctionToVTK(fflist[1],vtk_basename)

--[[ @doc
The resulting scalar flux is shown below:

![Scalar_flux](images/Triangle_1542_scalar_flux.png)
--]]

